/*
## Зачем нужен useId и как он помогает с доступностью?

Он предназначен для упрощения работы с уникальными идентификаторами, особенно в контексте доступности (accessibility) и серверного рендеринга.

## Чем useId лучше, чем генерация случайных строк для id?

1) Отсутствие гарантии уникальности между рендерами
2) Проблемы с серверным рендерингом (SSR)
3) Простота и читаемость

## Какой алгоритм генерации ID?

React использует внутренний счётчик, связанный с деревом компонентов, для генерации уникальных ID. Эти ID
основаны на порядке рендеринга компонентов и их положении в дереве. Формат ID обычно выглядит как :<prefix>:,
где <prefix> — это уникальный идентификатор, генерируемый React (например, :r1:, :r2:).

## Как React обеспечивает уникальность идентификаторов при серверном рендеринге?

При серверном рендеринге (SSR) React должен гарантировать, что ID, сгенерированные на сервере, совпадают с ID,
сгенерированными на клиенте во время гидратации (hydration). Это важно, чтобы избежать ошибок несоответствия DOM.
Во время гидратации на клиенте React использует тот же алгоритм, чтобы гарантировать, что порядок и значения ID совпадают
с серверными. Это достигается за счёт детерминированного подхода, который не зависит от случайных значений.

*/

function FormField() {
    const inputId = useId();
    const anotherInputId = useId();

    return (
        <div>
            <div>
                <label htmlFor={inputId}>Name:</label>
                <input id={inputId} type="text" />
            </div>
            <div>
                <label htmlFor={anotherInputId}>Email:</label>
                <input id={anotherInputId} type="email" />
            </div>
        </div>
    );
}
