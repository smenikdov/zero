/*
## Что делает useImperativeHandle?

useImperativeHandle — это хук React, который позволяет настраивать, какие методы или свойства
будут доступны через ref для функционального компонента. Он используется для предоставления
родительскому компоненту ограниченного интерфейса для взаимодействия с дочерним компонентом,
вместо предоставления прямого доступа к DOM-элементам или внутренним данным.

## Когда его стоит использовать?

- Когда нужно предоставить ограниченный API для родительского компонента: Например, вы хотите, чтобы родитель мог вызывать
  только определённые методы (например, focus, scrollTo, play) вместо полного доступа к DOM-элементу.
- Для инкапсуляции логики: Если дочерний компонент должен скрыть свою внутреннюю реализацию, но предоставить интерфейс для взаимодействия.
- В библиотеках или переиспользуемых компонентах: Когда вы создаёте компонент (например, кастомный инпут, плеер,
  модальное окно), который будет использоваться другими разработчиками, и хотите контролировать, как они с ним взаимодействуют.
- Когда прямой доступ к DOM нежелателен: Например, чтобы избежать прямого управления DOM-элементом, нарушая инкапсуляцию.

## Почему нужно использовать forwardRef вместе с useImperativeHandle?

forwardRef необходим, чтобы передать ref из родительского компонента в функциональный дочерний компонент. Без forwardRef
функциональный компонент не может получить ref, так как ref не передаётся через пропсы по умолчанию.
forwardRef оборачивает компонент, позволяя ему принимать ref как второй аргумент (после props). Затем
useImperativeHandle использует этот ref для настройки доступного интерфейса.

## Какие риски связаны с использованием useImperativeHandle для управления компонентами?

1) Нарушение инкапсуляции
2) Усложнение отладки
3) Недекларативный подход
*/

const Children = forwardRef((props, ref) => {
    const inputRef = useRef();

    useImperativeHandle(ref, () => ({
        focusInput: () => inputRef.current.focus(),
        clearInput: () => (inputRef.current.value = ''),
    }));

    return <input ref={inputRef} type="text" />;
});

function Parent() {
    const inputRef = useRef();

    const handleClick = () => {
        inputRef.current.focusInput();
        inputRef.current.clearInput();
    };

    return (
        <div>
            <Children ref={inputRef} />
            <button onClick={handleClick}>Фокус и очистка</button>
        </div>
    );
}
