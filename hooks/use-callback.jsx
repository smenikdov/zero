/*
## Почему useCallback важен для оптимизации?

useCallback в React используется для мемоизации функций, чтобы их ссылка (референс) оставалась стабильной
между рендерами. Это помогает оптимизировать производительность.
В приложениях с множеством компонентов и сложной логикой стабильные ссылки на функции
уменьшают количество ненужных операций, что особенно важно при работе с большими деревьями компонентов.

## Как useCallback работает с массивом зависимостей?

1) При первом рендере useCallback создает функцию и кэширует её.
2) При последующих рендерах React сравнивает текущий массив зависимостей с предыдущим (по принципу поверхностного сравнения, Object.is).
3) Если зависимости не изменились, useCallback возвращает ту же самую мемоизированную функцию (стабильную ссылку).
4) Если хотя бы одна зависимость изменилась, useCallback создает новую функцию и кэширует её.

## В каких случаях useCallback не даст прироста производительности?

1) Если дочерний компонент не обернут в React.memo, он будет рендериться при каждом рендере родителя, независимо от того, мемоизирована функция или нет
2) Если функция используется только внутри компонента и не передается в другие компоненты или хуки, мемоизация не нужна, так как смена ссылки на функцию не влияет на производительность
3) Если функция простая (например, возвращает примитив или выполняет минимальную логику), затраты на её создание незначительны, и useCallback может быть избыточным,
4) Если зависимости в массиве часто меняются, useCallback будет создавать новую функцию почти при каждом рендере
*/

function Button({ onClick, label }) {
    console.log(`Rendering button: ${label}`);
    return <button onClick={onClick}>{label}</button>;
}

function Counter() {
    const [count1, setCount1] = useState(0);
    const [count2, setCount2] = useState(0);

    const increment1 = useCallback(() => setCount1(c => c + 1), []);
    const increment2 = useCallback(() => setCount2(c => c + 1), []);

    return (
        <div>
            <p>Count1: {count1}</p>
            <p>Count2: {count2}</p>
            <Button onClick={increment1} label="Increment Count1" />
            <Button onClick={increment2} label="Increment Count2" />
        </div>
    );
}
