/*
## Как работает useContext?

1) Создаём контекст с помощью createContext
2) Оборачиваем нужные компоненты в провайдер
3) Используем контекст с помощью useContext

## Когда его стоит использовать?

Данные нужны многим компонентам на разных уровнях (например, тема оформления, данные пользователя, настройки приложения).
Пропсы передавать неудобно из-за глубокого дерева компонентов (избегается "prop drilling").
Данные являются глобальными или редко изменяются (например, настройки локализации, авторизация).
Вы хотите упростить доступ к данным без сложной цепочки передачи пропсов.

## Чем отличается useContext от передачи пропсов?

useContext устраняет необходимость передавать пропсы через промежуточные компоненты, что удобно для глобальных данных.
Пропсы делают зависимости компонента более явными и легче отслеживаемыми.
При использовании useContext компоненты автоматически перерендериваются при изменении значения контекста, в то время как с пропсами можно точнее контролировать рендеры.

*/

const ThemeContext = createContext();

function ThemeProvider({ children }) {
    const [theme, setTheme] = useState('light');

    const toggleTheme = () => {
        setTheme(theme === 'light' ? 'dark' : 'light');
    };

    return (
        <ThemeContext.Provider value={{ theme, toggleTheme }}>
            {children}
        </ThemeContext.Provider>
    );
}

function Children() {
    const { theme } = useContext(ThemeContext);

    return (
        <div className={theme}>
            <p>Theme: {theme}</p>
        </div>
    );
}
